{
    "description": "JSON Schema for Deploying RedHat OpenShift on Cisco AI Pods Architecture.",
    "$id": "https://github.com/scotttyso/flashstack-ai",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/components/schemas/nac",
    "title": "Deploying RedHat OpenShift on Cisco AI Pods",
    "components": {
        "schemas": {
            "argo_cd": {
                "additionalProperties": false,
                "description": "This dictionary provides the required configuration settings for RedHat Openshift core component deployment with ArgoCD.\n\nRequired Fields are:\n  * `cpu_architecture`\n  * `external_secrets`\n  * `logging`\n  * `repo_url`\n  * `sync_policy`\n\nOptional fields are:\n  * `portworx`\n  * `rhacm`",
                "required": [
                    "cpu_architecture",
                    "external_secrets",
                    "logging",
                    "repo_url",
                    "sync_policy"
                ],
                "title": "Openshift GitOps with ArgoCD",
                "type": "object",
                "properties": {
                    "cpu_architecture": {
                        "default": "amd64",
                        "description": "Defines the CPU Architecture for the NMState Instance.\n\nOptions are:\n  * `amd64`\n  * `arm64`\n\nThis can be found in the following file:\n\n * `cluster-config/nmstate/instance/base/nmstate-nmstate`.",
                        "enum": [
                            "amd64",
                            "arm64"
                        ],
                        "title": "CPU Architecture",
                        "type": "string"
                    },
                    "external_secrets": {
                        "$ref": "#/components/schemas/argo_cd.external_secrets"
                    },
                    "logging": {
                        "$ref": "#/components/schemas/argo_cd.logging"
                    },
                    "portworx": {
                        "$ref": "#/components/schemas/argo_cd.portworx"
                    },
                    "repo_url": {
                        "default": "",
                        "description": "Git Repository URL for the location of the YAML Configuration files for ArgoCD.",
                        "intersight_api": "Uri",
                        "minLength": 10,
                        "maxLength": 1024,
                        "pattern": "^(http|https):\/\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}$",
                        "title": "ArgoCD Git Repository URL",
                        "type": "string"
                    },
                    "rhacm": {
                        "$ref": "#/components/schemas/argo_cd.rhacm"
                    },
                    "sync_policy": {
                        "$ref": "#/components/schemas/argo_cd.sync_policy"
                    }
                }
            },
            "argo_cd.external_secrets": {
                "additionalProperties": false,
                "description": "Required Fields are:\n  * `enabled`",
                "required": [
                    "enabled"
                ],
                "title": "External Secrets App",
                "type": "object",
                "properties": {
                    "enabled": {
                        "default": false,
                        "description": "Default `false`.  Flag to determine if the External Secrets application should be enabled",
                        "title": "Enabled",
                        "type": "boolean"
                    }
                }
            },
            "argo_cd.sync_policy": {
                "additionalProperties": false,
                "description": "Allows Argo CD to automatically sync an application when it detects differences between the desired manifests in Git and the live state in the cluster.\n\nEliminates the need for CI/CD pipelines to directly interact with the Argo CD API server for deployments; instead, pipelines simply push changes to the Git repository. Required Fields are:\n  * `prune`\n  * `self_heal`",
                "required": [
                    "prune",
                    "self_heal"
                ],
                "title": "External Secrets App",
                "type": "object",
                "properties": {
                    "prune": {
                        "default": false,
                        "description": "Default `false`.  Flag to determine if the External Secrets application should be enabled",
                        "title": "Enabled",
                        "type": "boolean"
                    }
                }
            },
            "nac": {
                "additionalProperties": false,
                "description": "This dictionary provides the required configuration settings for OpenShift on AI Pods.\n\nRequired Fields are:\n  * `cluster`\n\nOptional fields are:\n  * `argo_cd`\n  * `redhat_openshift_ai`",
                "required": [
                    "cluster"
                ],
                "title": "RedHat Openshift on AI Pods",
                "type": "object",
                "properties": {
                    "argo_cd": {
                        "$ref": "#/components/schemas/argo_cd"
                    },
                    "cluster": {
                        "$ref": "#/components/schemas/cluster"
                    },
                    "redhat_openshift_ai": {
                        "$ref": "#/components/schemas/redhat_openshift_ai"
                    }
                }
            }

        }
    }
}
{
    "properties": {
    "argo_cd": {
      "type": "object",
      "properties": {
        "external_secrets": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable external secrets."
            }
          },
          "required": ["enabled"]
        },
        "logging": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable logging."
            },
            "logging_operator": {
              "type": "object",
              "properties": {
                "patch_channel": {
                  "type": "string",
                  "description": "Patch channel for logging operator."
                }
              },
              "required": ["patch_channel"]
            },
            "loki_operator": {
              "type": "object",
              "properties": {
                "patch_channel": {
                  "type": "string",
                  "description": "Patch channel for Loki operator."
                }
              },
              "required": ["patch_channel"]
            },
            "loki_stack": {
              "type": "object",
              "properties": {
                "size": {
                  "type": "string",
                  "description": "Size configuration for Loki stack."
                },
                "storage": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string",
                          "description": "Schema version for Loki storage."
                        },
                        "effective_date": {
                          "type": "string",
                          "format": "date",
                          "description": "Effective date for Loki storage schema."
                        }
                      },
                      "required": ["version", "effective_date"]
                    },
                    "secret": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Secret name for Loki storage."
                        },
                        "type": {
                          "type": "string",
                          "description": "Secret type for Loki storage (e.g., s3)."
                        }
                      },
                      "required": ["name", "type"]
                    }
                  },
                  "required": ["schema", "secret"]
                }
              },
              "required": ["size", "storage"]
            }
          },
          "required": ["enabled", "logging_operator", "loki_operator", "loki_stack"]
        },
        "portworx": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable Portworx."
            },
            "ignition_version": {
              "type": "string",
              "description": "Ignition version for Portworx."
            }
          },
          "required": ["enabled", "ignition_version"]
        },
        "repo_url": {
          "type": "string",
          "format": "uri",
          "description": "Repository URL for GitOps."
        },
        "rhacm": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable RHACM (Red Hat Advanced Cluster Management)."
            },
            "release": {
              "type": "number",
              "description": "Release version for RHACM."
            }
          },
          "required": ["enabled", "release"]
        },
        "sync_policy": {
          "type": "object",
          "properties": {
            "prune": {
              "type": "boolean",
              "description": "Argo CD sync policy: prune."
            },
            "self_heal": {
              "type": "boolean",
              "description": "Argo CD sync policy: self-heal."
            }
          },
          "required": ["prune", "self_heal"]
        }
      },
      "required": [
        "cpu_architecture",
        "external_secrets",
        "logging",
        "portworx",
        "repo_url",
        "rhacm",
        "sync_policy"
      ]
    },
    "cluster": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "object",
          "properties": {
            "control_plane": {
              "type": "integer",
              "description": "Number of control plane agents."
            },
            "worker": {
              "type": "integer",
              "description": "Number of worker agents."
            }
          },
          "required": ["control_plane", "worker"]
        },
        "base_domain": {
          "type": "string",
          "description": "Base domain for the cluster."
        },
        "cilium": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Cilium channel version."
            },
            "kubebuilder_version": {
              "type": "string",
              "description": "Kubebuilder version for Cilium."
            },
            "image": {
              "type": "string",
              "description": "Cilium image."
            }
          },
          "required": ["channel", "kubebuilder_version", "image"]
        },
        "dns_servers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4"
          },
          "description": "List of DNS server IP addresses."
        },
        "label": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "Cluster location label."
            }
          },
          "required": ["location"]
        },
        "name": {
          "type": "string",
          "description": "Name of the cluster."
        },
        "networks": {
          "type": "object",
          "properties": {
            "cluster": {
              "type": "object",
              "properties": {
                "cidr": {
                  "type": "string",
                  "format": "ipv4-cidr",
                  "description": "Cluster network CIDR."
                },
                "host_prefix": {
                  "type": "integer",
                  "description": "Host prefix for cluster network."
                }
              },
              "required": ["cidr", "host_prefix"]
            },
            "service": {
              "type": "object",
              "properties": {
                "cidr": {
                  "type": "string",
                  "format": "ipv4-cidr",
                  "description": "Service network CIDR."
                }
              },
              "required": ["cidr"]
            },
            "machine": {
              "type": "object",
              "properties": {
                "cidr": {
                  "type": "string",
                  "format": "ipv4-cidr",
                  "description": "Machine network CIDR."
                }
              },
              "required": ["cidr"]
            }
          },
          "required": ["cluster", "service", "machine"]
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "Hostname of the node."
              },
              "config_interfaces": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "ipv4",
                          "description": "IP address of the interface."
                        },
                        "prefix": {
                          "type": "integer",
                          "description": "CIDR prefix for the IP address."
                        }
                      },
                      "required": ["address", "prefix"]
                    },
                    "mac_address": {
                      "type": "string",
                      "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
                      "description": "MAC address of the interface."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the interface (e.g., ens5)."
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the interface (e.g., ethernet)."
                    }
                  },
                  "required": ["ip", "mac_address", "name", "type"]
                }
              },
              "physical_interfaces": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "mac_address": {
                      "type": "string",
                      "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
                      "description": "MAC address of the physical interface."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the physical interface."
                    }
                  },
                  "required": ["mac_address", "name"]
                }
              },
              "routes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "destination": {
                      "type": "string",
                      "format": "ipv4-cidr",
                      "description": "Destination CIDR for the route."
                    },
                    "gateway": {
                      "type": "string",
                      "format": "ipv4",
                      "description": "Gateway IP for the route."
                    },
                    "interface": {
                      "type": "string",
                      "description": "Interface name for the route."
                    }
                  },
                  "required": ["destination", "gateway", "interface"]
                }
              }
            },
            "required": ["hostname", "config_interfaces", "physical_interfaces", "routes"]
          },
          "description": "List of cluster nodes and their configurations."
        },
        "ntp_servers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4"
          },
          "description": "List of NTP server IP addresses."
        },
        "pull_secret": {
          "type": "string",
          "description": "Base64 encoded JSON string of image pull secrets."
        },
        "ssh_public_key": {
          "type": "string",
          "description": "SSH public key for cluster access."
        },
        "version": {
          "type": "string",
          "description": "Cluster version."
        },
        "vip": {
          "type": "object",
          "properties": {
            "api": {
              "type": "string",
              "format": "ipv4",
              "description": "API VIP address."
            },
            "ingress": {
              "type": "string",
              "format": "ipv4",
              "description": "Ingress VIP address."
            }
          },
          "required": ["api", "ingress"]
        }
      },
      "required": [
        "agents",
        "base_domain",
        "cilium",
        "dns_servers",
        "label",
        "name",
        "networks",
        "nodes",
        "ntp_servers",
        "pull_secret",
        "ssh_public_key",
        "version",
        "vip"
      ]
    },
    "redhat_openshift_ai": {
      "type": "object",
      "properties": {
        "nvidia": {
          "type": "object",
          "properties": {
            "driver_version": {
              "type": "string",
              "description": "NVIDIA driver version."
            }
          },
          "required": ["driver_version"]
        }
      },
      "required": ["nvidia"]
    }
  },
  "required": ["argo_cd", "cluster", "redhat_openshift_ai"]
}